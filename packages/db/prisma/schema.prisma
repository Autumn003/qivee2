generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String         @id @default(uuid())
  name        String
  email       String         @unique
  password    String
  number      String?        @unique
  avatar      String?
  role        UserRole       @default(USER)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  orders      Order[]
  addresses   Address[]
  cartItems   CartItem[]
  wishlist    WishlistItem[]
  resetToken  String?
  resetExpiry DateTime?
}

model Product {
  id          String          @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  images      String[]
  category    productCategory
  isFeatured  Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orderItems  OrderItem[]
  cartItems   CartItem[]
  wishlist    WishlistItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Order {
  id                String        @id @default(uuid())
  totalPrice        Float
  shippingCost     Float
  tax               Float
  status            OrderStatus   @default(PROCESSING)
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  shippingAddress   Json

  // Snapshot of Address Fields
  shippingName    String
  shippingHouse   String
  shippingStreet  String
  shippingCity    String
  shippingZipCode String
  shippingState   String
  shippingCountry String
  shippingMobile  String

  orderItems  OrderItem[]
  transaction Transaction?
}

model Transaction {
  id                  String        @id @default(uuid())
  orderId             String        @unique
  order               Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  phonePeTxnId        String?       @unique
  amount              Float
  status              PaymentStatus @default(PENDING)
  paymentMethod       PaymentMethod
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  phonePeResponseJson String? // Store raw response for reference
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  house     String
  street    String
  city      String
  zipCode   String
  state     String
  country   String
  mobile    String
  isDefault Boolean @default(false)
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum UserRole {
  ADMIN
  USER
}

enum productCategory {
  baby_products
  mobile_accessories
  backpacks
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum PaymentMethod {
  COD
  CARD
  UPI
  PHONEPE
}
